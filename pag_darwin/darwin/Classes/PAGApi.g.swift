// Autogenerated from Pigeon (v25.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
import libpag

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PAGError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PAGError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PAGError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PAGError {
  return PAGError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Handles the callback when an object is deallocated.
protocol PAGApiPigeonInternalFinalizerDelegate: AnyObject {
  /// Invoked when the strong reference of an object is deallocated in an `InstanceManager`.
  func onDeinit(identifier: Int64)
}


// Attaches to an object to receive a callback when the object is deallocated.
internal final class PAGApiPigeonInternalFinalizer {
  private static let associatedObjectKey = malloc(1)!

  private let identifier: Int64
  // Reference to the delegate is weak because the callback should be ignored if the
  // `InstanceManager` is deallocated.
  private weak var delegate: PAGApiPigeonInternalFinalizerDelegate?

  private init(identifier: Int64, delegate: PAGApiPigeonInternalFinalizerDelegate) {
    self.identifier = identifier
    self.delegate = delegate
  }

  internal static func attach(
    to instance: AnyObject, identifier: Int64, delegate: PAGApiPigeonInternalFinalizerDelegate
  ) {
    let finalizer = PAGApiPigeonInternalFinalizer(identifier: identifier, delegate: delegate)
    objc_setAssociatedObject(instance, associatedObjectKey, finalizer, .OBJC_ASSOCIATION_RETAIN)
  }

  static func detach(from instance: AnyObject) {
    objc_setAssociatedObject(instance, associatedObjectKey, nil, .OBJC_ASSOCIATION_ASSIGN)
  }

  deinit {
    delegate?.onDeinit(identifier: identifier)
  }
}


/// Maintains instances used to communicate with the corresponding objects in Dart.
///
/// Objects stored in this container are represented by an object in Dart that is also stored in
/// an InstanceManager with the same identifier.
///
/// When an instance is added with an identifier, either can be used to retrieve the other.
///
/// Added instances are added as a weak reference and a strong reference. When the strong
/// reference is removed and the weak reference is deallocated,`PAGApiPigeonInternalFinalizerDelegate.onDeinit`
/// is called with the instance's identifier. However, if the strong reference is removed and then the identifier is
/// retrieved with the intention to pass the identifier to Dart (e.g. by calling `identifierWithStrongReference`),
/// the strong reference to the instance is re-added. The strong reference will then need to be removed manually
/// again.
///
/// Accessing and inserting to an InstanceManager is thread safe.
final class PAGApiPigeonInstanceManager {
  // Identifiers are locked to a specific range to avoid collisions with objects
  // created simultaneously from Dart.
  // Host uses identifiers >= 2^16 and Dart is expected to use values n where,
  // 0 <= n < 2^16.
  private static let minHostCreatedIdentifier: Int64 = 65536

  private let lockQueue = DispatchQueue(label: "PAGApiPigeonInstanceManager")
  private let identifiers: NSMapTable<AnyObject, NSNumber> = NSMapTable(
    keyOptions: [.weakMemory, .objectPointerPersonality], valueOptions: .strongMemory)
  private let weakInstances: NSMapTable<NSNumber, AnyObject> = NSMapTable(
    keyOptions: .strongMemory, valueOptions: [.weakMemory, .objectPointerPersonality])
  private let strongInstances: NSMapTable<NSNumber, AnyObject> = NSMapTable(
    keyOptions: .strongMemory, valueOptions: [.strongMemory, .objectPointerPersonality])
  private let finalizerDelegate: PAGApiPigeonInternalFinalizerDelegate
  private var nextIdentifier: Int64 = minHostCreatedIdentifier

  public init(finalizerDelegate: PAGApiPigeonInternalFinalizerDelegate) {
    self.finalizerDelegate = finalizerDelegate
  }

  /// Adds a new instance that was instantiated from Dart.
  ///
  /// The same instance can be added multiple times, but each identifier must be unique. This allows
  /// two objects that are equivalent (e.g. conforms to `Equatable`)  to both be added.
  ///
  /// - Parameters:
  ///   - instance: the instance to be stored
  ///   - identifier: the identifier to be paired with instance. This value must be >= 0 and unique
  func addDartCreatedInstance(_ instance: AnyObject, withIdentifier identifier: Int64) {
    lockQueue.async {
      self.addInstance(instance, withIdentifier: identifier)
    }
  }

  /// Adds a new instance that was instantiated from the host platform.
  ///
  /// - Parameters:
  ///   - instance: the instance to be stored. This must be unique to all other added instances.
  /// - Returns: the unique identifier (>= 0) stored with instance
  func addHostCreatedInstance(_ instance: AnyObject) -> Int64 {
    assert(!containsInstance(instance), "Instance of \(instance) has already been added.")
    var identifier: Int64 = -1
    lockQueue.sync {
      identifier = nextIdentifier
      nextIdentifier += 1
      self.addInstance(instance, withIdentifier: identifier)
    }
    return identifier
  }

  /// Removes `instanceIdentifier` and its associated strongly referenced instance, if present, from the manager.
  ///
  /// - Parameters:
  ///   - instanceIdentifier: the identifier paired to an instance.
  /// - Returns: removed instance if the manager contains the given identifier, otherwise `nil` if
  ///   the manager doesn't contain the value
  func removeInstance<T: AnyObject>(withIdentifier instanceIdentifier: Int64) throws -> T? {
    var instance: AnyObject? = nil
    lockQueue.sync {
      instance = strongInstances.object(forKey: NSNumber(value: instanceIdentifier))
      strongInstances.removeObject(forKey: NSNumber(value: instanceIdentifier))
    }
    return instance as? T
  }

  /// Retrieves the instance associated with identifier.
  ///
  /// - Parameters:
  ///   - instanceIdentifier: the identifier associated with an instance
  /// - Returns: the instance associated with `instanceIdentifier` if the manager contains the value, otherwise
  ///   `nil` if the manager doesn't contain the value
  func instance<T: AnyObject>(forIdentifier instanceIdentifier: Int64) -> T? {
    var instance: AnyObject? = nil
    lockQueue.sync {
      instance = weakInstances.object(forKey: NSNumber(value: instanceIdentifier))
    }
    return instance as? T
  }

  private func addInstance(_ instance: AnyObject, withIdentifier identifier: Int64) {
    assert(identifier >= 0)
    assert(
      weakInstances.object(forKey: identifier as NSNumber) == nil,
      "Identifier has already been added: \(identifier)")
    identifiers.setObject(NSNumber(value: identifier), forKey: instance)
    weakInstances.setObject(instance, forKey: NSNumber(value: identifier))
    strongInstances.setObject(instance, forKey: NSNumber(value: identifier))
    PAGApiPigeonInternalFinalizer.attach(to: instance, identifier: identifier, delegate: finalizerDelegate)
  }

  /// Retrieves the identifier paired with an instance.
  ///
  /// If the manager contains a strong reference to `instance`, it will return the identifier
  /// associated with `instance`. If the manager contains only a weak reference to `instance`, a new
  /// strong reference to `instance` will be added and will need to be removed again with `removeInstance`.
  ///
  /// If this method returns a nonnull identifier, this method also expects the Dart
  /// `PAGApiPigeonInstanceManager` to have, or recreate, a weak reference to the Dart instance the
  /// identifier is associated with.
  ///
  /// - Parameters:
  ///   - instance: an instance that may be stored in the manager
  /// - Returns: the identifier associated with `instance` if the manager contains the value, otherwise
  ///   `nil` if the manager doesn't contain the value
  func identifierWithStrongReference(forInstance instance: AnyObject) -> Int64? {
    var identifier: Int64? = nil
    lockQueue.sync {
      if let existingIdentifier = identifiers.object(forKey: instance)?.int64Value {
        strongInstances.setObject(instance, forKey: NSNumber(value: existingIdentifier))
        identifier = existingIdentifier
      }
    }
    return identifier
  }

  /// Whether this manager contains the given `instance`.
  ///
  /// - Parameters:
  ///   - instance: the instance whose presence in this manager is to be tested
  /// - Returns: whether this manager contains the given `instance`
  func containsInstance(_ instance: AnyObject) -> Bool {
    var containsInstance = false
    lockQueue.sync {
      containsInstance = identifiers.object(forKey: instance) != nil
    }
    return containsInstance
  }

  /// Removes all of the instances from this manager.
  ///
  /// The manager will be empty after this call returns.
  func removeAllObjects() throws {
    lockQueue.sync {
      identifiers.removeAllObjects()
      weakInstances.removeAllObjects()
      strongInstances.removeAllObjects()
      nextIdentifier = PAGApiPigeonInstanceManager.minHostCreatedIdentifier
    }
  }

  /// The number of instances stored as a strong reference.
  ///
  /// For debugging and testing purposes.
  internal var strongInstanceCount: Int {
    var count: Int = 0
    lockQueue.sync {
      count = strongInstances.count
    }
    return count
  }

  /// The number of instances stored as a weak reference.
  ///
  /// For debugging and testing purposes. NSMapTables that store keys or objects as weak
  /// reference will be reclaimed non-deterministically.
  internal var weakInstanceCount: Int {
    var count: Int = 0
    lockQueue.sync {
      count = weakInstances.count
    }
    return count
  }
}


private class PAGApiPigeonInstanceManagerApi {
  /// The codec used for serializing messages.
  var codec: FlutterStandardMessageCodec { PAGApiPigeonCodec.shared }

  /// Handles sending and receiving messages with Dart.
  unowned let binaryMessenger: FlutterBinaryMessenger

  init(binaryMessenger: FlutterBinaryMessenger) {
    self.binaryMessenger = binaryMessenger
  }

  /// Sets up an instance of `PAGApiPigeonInstanceManagerApi` to handle messages through the `binaryMessenger`.
  static func setUpMessageHandlers(binaryMessenger: FlutterBinaryMessenger, instanceManager: PAGApiPigeonInstanceManager?) {
    let codec = PAGApiPigeonCodec.shared
    let removeStrongReferenceChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pag_darwin.PigeonInternalInstanceManager.removeStrongReference", binaryMessenger: binaryMessenger, codec: codec)
    if let instanceManager = instanceManager {
      removeStrongReferenceChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let identifierArg = args[0] as! Int64
        do {
          let _: AnyObject? = try instanceManager.removeInstance(withIdentifier: identifierArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      removeStrongReferenceChannel.setMessageHandler(nil)
    }
    let clearChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pag_darwin.PigeonInternalInstanceManager.clear", binaryMessenger: binaryMessenger, codec: codec)
    if let instanceManager = instanceManager {
      clearChannel.setMessageHandler { _, reply in
        do {
          try instanceManager.removeAllObjects()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      clearChannel.setMessageHandler(nil)
    }
  }

  /// Sends a message to the Dart `InstanceManager` to remove the strong reference of the instance associated with `identifier`.
  func removeStrongReference(identifier identifierArg: Int64, completion: @escaping (Result<Void, PAGError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.pag_darwin.PigeonInternalInstanceManager.removeStrongReference"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([identifierArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PAGError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
}
protocol PAGApiPigeonProxyApiDelegate {
  /// An implementation of [PigeonApiPAGViewApi] used to add a new Dart instance of
  /// `PAGViewApi` to the Dart `InstanceManager` and make calls to Dart.
  func pigeonApiPAGViewApi(_ registrar: PAGApiPigeonProxyApiRegistrar) -> PigeonApiPAGViewApi
  /// An implementation of [PigeonApiPAGCompositionApi] used to add a new Dart instance of
  /// `PAGCompositionApi` to the Dart `InstanceManager` and make calls to Dart.
  func pigeonApiPAGCompositionApi(_ registrar: PAGApiPigeonProxyApiRegistrar) -> PigeonApiPAGCompositionApi
  /// An implementation of [PigeonApiPAGFileApi] used to add a new Dart instance of
  /// `PAGFileApi` to the Dart `InstanceManager` and make calls to Dart.
  func pigeonApiPAGFileApi(_ registrar: PAGApiPigeonProxyApiRegistrar) -> PigeonApiPAGFileApi
}

open class PAGApiPigeonProxyApiRegistrar {
  let binaryMessenger: FlutterBinaryMessenger
  let apiDelegate: PAGApiPigeonProxyApiDelegate
  let instanceManager: PAGApiPigeonInstanceManager
  /// Whether APIs should ignore calling to Dart.
  public var ignoreCallsToDart = false
  private var _codec: FlutterStandardMessageCodec?
  var codec: FlutterStandardMessageCodec {
    if _codec == nil {
      _codec = FlutterStandardMessageCodec(
        readerWriter: PAGApiPigeonInternalProxyApiCodecReaderWriter(pigeonRegistrar: self))
    }
    return _codec!
  }

  private class InstanceManagerApiFinalizerDelegate: PAGApiPigeonInternalFinalizerDelegate {
    let api: PAGApiPigeonInstanceManagerApi

    init(_ api: PAGApiPigeonInstanceManagerApi) {
      self.api = api
    }

    public func onDeinit(identifier: Int64) {
      api.removeStrongReference(identifier: identifier) {
        _ in
      }
    }
  }

  init(binaryMessenger: FlutterBinaryMessenger, apiDelegate: PAGApiPigeonProxyApiDelegate) {
    self.binaryMessenger = binaryMessenger
    self.apiDelegate = apiDelegate
    self.instanceManager = PAGApiPigeonInstanceManager(
      finalizerDelegate: InstanceManagerApiFinalizerDelegate(
        PAGApiPigeonInstanceManagerApi(binaryMessenger: binaryMessenger)))
  }

  func setUp() {
    PAGApiPigeonInstanceManagerApi.setUpMessageHandlers(binaryMessenger: binaryMessenger, instanceManager: instanceManager)
    PigeonApiPAGViewApi.setUpMessageHandlers(binaryMessenger: binaryMessenger, api: apiDelegate.pigeonApiPAGViewApi(self))
    PigeonApiPAGCompositionApi.setUpMessageHandlers(binaryMessenger: binaryMessenger, api: apiDelegate.pigeonApiPAGCompositionApi(self))
    PigeonApiPAGFileApi.setUpMessageHandlers(binaryMessenger: binaryMessenger, api: apiDelegate.pigeonApiPAGFileApi(self))
  }
  func tearDown() {
    PAGApiPigeonInstanceManagerApi.setUpMessageHandlers(binaryMessenger: binaryMessenger, instanceManager: nil)
    PigeonApiPAGViewApi.setUpMessageHandlers(binaryMessenger: binaryMessenger, api: nil)
    PigeonApiPAGCompositionApi.setUpMessageHandlers(binaryMessenger: binaryMessenger, api: nil)
    PigeonApiPAGFileApi.setUpMessageHandlers(binaryMessenger: binaryMessenger, api: nil)
  }
}
private class PAGApiPigeonInternalProxyApiCodecReaderWriter: FlutterStandardReaderWriter {
  unowned let pigeonRegistrar: PAGApiPigeonProxyApiRegistrar

  private class PAGApiPigeonInternalProxyApiCodecReader: PAGApiPigeonCodecReader {
    unowned let pigeonRegistrar: PAGApiPigeonProxyApiRegistrar

    init(data: Data, pigeonRegistrar: PAGApiPigeonProxyApiRegistrar) {
      self.pigeonRegistrar = pigeonRegistrar
      super.init(data: data)
    }

    override func readValue(ofType type: UInt8) -> Any? {
      switch type {
      case 128:
        let identifier = self.readValue()
        let instance: AnyObject? = pigeonRegistrar.instanceManager.instance(
          forIdentifier: identifier is Int64 ? identifier as! Int64 : Int64(identifier as! Int32))
        if instance == nil {
          print("Failed to find instance with identifier: \(identifier!)")
        }
        return instance
      default:
        return super.readValue(ofType: type)
      }
    }
  }

  private class PAGApiPigeonInternalProxyApiCodecWriter: PAGApiPigeonCodecWriter {
    unowned let pigeonRegistrar: PAGApiPigeonProxyApiRegistrar

    init(data: NSMutableData, pigeonRegistrar: PAGApiPigeonProxyApiRegistrar) {
      self.pigeonRegistrar = pigeonRegistrar
      super.init(data: data)
    }

    override func writeValue(_ value: Any) {
      if value is [Any] || value is Bool || value is Data || value is [AnyHashable: Any] || value is Double || value is FlutterStandardTypedData || value is Int64 || value is String || value is PAGScaleModeApi {
        super.writeValue(value)
        return
      }


      if let instance = value as? PAGView {
        pigeonRegistrar.apiDelegate.pigeonApiPAGViewApi(pigeonRegistrar).pigeonNewInstance(
          pigeonInstance: instance
        ) { _ in }
        super.writeByte(128)
        super.writeValue(
          pigeonRegistrar.instanceManager.identifierWithStrongReference(forInstance: instance as AnyObject)!)
        return
      }


      if let instance = value as? PAGFile {
        pigeonRegistrar.apiDelegate.pigeonApiPAGFileApi(pigeonRegistrar).pigeonNewInstance(
          pigeonInstance: instance
        ) { _ in }
        super.writeByte(128)
        super.writeValue(
          pigeonRegistrar.instanceManager.identifierWithStrongReference(forInstance: instance as AnyObject)!)
        return
      }


      if let instance = value as? PAGComposition {
        pigeonRegistrar.apiDelegate.pigeonApiPAGCompositionApi(pigeonRegistrar).pigeonNewInstance(
          pigeonInstance: instance
        ) { _ in }
        super.writeByte(128)
        super.writeValue(
          pigeonRegistrar.instanceManager.identifierWithStrongReference(forInstance: instance as AnyObject)!)
        return
      }


      if let instance = value as AnyObject?, pigeonRegistrar.instanceManager.containsInstance(instance)
      {
        super.writeByte(128)
        super.writeValue(
          pigeonRegistrar.instanceManager.identifierWithStrongReference(forInstance: instance)!)
      } else {
        print("Unsupported value: \(value) of \(type(of: value))")
        assert(false, "Unsupported value for PAGApiPigeonInternalProxyApiCodecWriter")
      }

    }
  }

  init(pigeonRegistrar: PAGApiPigeonProxyApiRegistrar) {
    self.pigeonRegistrar = pigeonRegistrar
  }

  override func reader(with data: Data) -> FlutterStandardReader {
    return PAGApiPigeonInternalProxyApiCodecReader(data: data, pigeonRegistrar: pigeonRegistrar)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return PAGApiPigeonInternalProxyApiCodecWriter(data: data, pigeonRegistrar: pigeonRegistrar)
  }
}

enum PAGScaleModeApi: Int {
  case none = 0
  case stretch = 1
  case letterBox = 2
  case zoom = 3
}

private class PAGApiPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PAGScaleModeApi(rawValue: enumResultAsInt)
      }
      return nil
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class PAGApiPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? PAGScaleModeApi {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else {
      super.writeValue(value)
    }
  }
}

private class PAGApiPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return PAGApiPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return PAGApiPigeonCodecWriter(data: data)
  }
}

class PAGApiPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = PAGApiPigeonCodec(readerWriter: PAGApiPigeonCodecReaderWriter())
}

protocol PigeonApiDelegatePAGViewApi {
  func pigeonDefaultConstructor(pigeonApi: PigeonApiPAGViewApi) throws -> PAGView
  func getComposition(pigeonApi: PigeonApiPAGViewApi, pigeonInstance: PAGView) throws -> PAGComposition
  func setCompositon(pigeonApi: PigeonApiPAGViewApi, pigeonInstance: PAGView, value: PAGComposition) throws
  func getRepeatCount(pigeonApi: PigeonApiPAGViewApi, pigeonInstance: PAGView) throws -> Int64
  func setRepeatCount(pigeonApi: PigeonApiPAGViewApi, pigeonInstance: PAGView, value: Int64) throws
  func getScaleMode(pigeonApi: PigeonApiPAGViewApi, pigeonInstance: PAGView) throws -> PAGScaleModeApi
  func setScaleMode(pigeonApi: PigeonApiPAGViewApi, pigeonInstance: PAGView, value: PAGScaleModeApi) throws
  func getProgress(pigeonApi: PigeonApiPAGViewApi, pigeonInstance: PAGView) throws -> Double
  func setProgress(pigeonApi: PigeonApiPAGViewApi, pigeonInstance: PAGView, value: Double) throws
  func isPlaying(pigeonApi: PigeonApiPAGViewApi, pigeonInstance: PAGView) throws -> Bool
  func play(pigeonApi: PigeonApiPAGViewApi, pigeonInstance: PAGView) throws
  func pause(pigeonApi: PigeonApiPAGViewApi, pigeonInstance: PAGView) throws
  func stop(pigeonApi: PigeonApiPAGViewApi, pigeonInstance: PAGView) throws
}

protocol PigeonApiProtocolPAGViewApi {
}

final class PigeonApiPAGViewApi: PigeonApiProtocolPAGViewApi  {
  unowned let pigeonRegistrar: PAGApiPigeonProxyApiRegistrar
  let pigeonDelegate: PigeonApiDelegatePAGViewApi
  init(pigeonRegistrar: PAGApiPigeonProxyApiRegistrar, delegate: PigeonApiDelegatePAGViewApi) {
    self.pigeonRegistrar = pigeonRegistrar
    self.pigeonDelegate = delegate
  }
  static func setUpMessageHandlers(binaryMessenger: FlutterBinaryMessenger, api: PigeonApiPAGViewApi?) {
    let codec: FlutterStandardMessageCodec =
      api != nil
      ? FlutterStandardMessageCodec(
        readerWriter: PAGApiPigeonInternalProxyApiCodecReaderWriter(pigeonRegistrar: api!.pigeonRegistrar))
      : FlutterStandardMessageCodec.sharedInstance()
    let pigeonDefaultConstructorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pag_darwin.PAGViewApi.pigeon_defaultConstructor", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pigeonDefaultConstructorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonIdentifierArg = args[0] as! Int64
        do {
          api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
try api.pigeonDelegate.pigeonDefaultConstructor(pigeonApi: api),
withIdentifier: pigeonIdentifierArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      pigeonDefaultConstructorChannel.setMessageHandler(nil)
    }
    let getCompositionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pag_darwin.PAGViewApi.getComposition", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getCompositionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! PAGView
        do {
          let result = try api.pigeonDelegate.getComposition(pigeonApi: api, pigeonInstance: pigeonInstanceArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getCompositionChannel.setMessageHandler(nil)
    }
    let setCompositonChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pag_darwin.PAGViewApi.setCompositon", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setCompositonChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! PAGView
        let valueArg = args[1] as! PAGComposition
        do {
          try api.pigeonDelegate.setCompositon(pigeonApi: api, pigeonInstance: pigeonInstanceArg, value: valueArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setCompositonChannel.setMessageHandler(nil)
    }
    let getRepeatCountChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pag_darwin.PAGViewApi.getRepeatCount", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getRepeatCountChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! PAGView
        do {
          let result = try api.pigeonDelegate.getRepeatCount(pigeonApi: api, pigeonInstance: pigeonInstanceArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getRepeatCountChannel.setMessageHandler(nil)
    }
    let setRepeatCountChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pag_darwin.PAGViewApi.setRepeatCount", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setRepeatCountChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! PAGView
        let valueArg = args[1] as! Int64
        do {
          try api.pigeonDelegate.setRepeatCount(pigeonApi: api, pigeonInstance: pigeonInstanceArg, value: valueArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setRepeatCountChannel.setMessageHandler(nil)
    }
    let getScaleModeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pag_darwin.PAGViewApi.getScaleMode", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getScaleModeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! PAGView
        do {
          let result = try api.pigeonDelegate.getScaleMode(pigeonApi: api, pigeonInstance: pigeonInstanceArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getScaleModeChannel.setMessageHandler(nil)
    }
    let setScaleModeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pag_darwin.PAGViewApi.setScaleMode", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setScaleModeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! PAGView
        let valueArg = args[1] as! PAGScaleModeApi
        do {
          try api.pigeonDelegate.setScaleMode(pigeonApi: api, pigeonInstance: pigeonInstanceArg, value: valueArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setScaleModeChannel.setMessageHandler(nil)
    }
    let getProgressChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pag_darwin.PAGViewApi.getProgress", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getProgressChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! PAGView
        do {
          let result = try api.pigeonDelegate.getProgress(pigeonApi: api, pigeonInstance: pigeonInstanceArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getProgressChannel.setMessageHandler(nil)
    }
    let setProgressChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pag_darwin.PAGViewApi.setProgress", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setProgressChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! PAGView
        let valueArg = args[1] as! Double
        do {
          try api.pigeonDelegate.setProgress(pigeonApi: api, pigeonInstance: pigeonInstanceArg, value: valueArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setProgressChannel.setMessageHandler(nil)
    }
    let isPlayingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pag_darwin.PAGViewApi.isPlaying", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isPlayingChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! PAGView
        do {
          let result = try api.pigeonDelegate.isPlaying(pigeonApi: api, pigeonInstance: pigeonInstanceArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isPlayingChannel.setMessageHandler(nil)
    }
    let playChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pag_darwin.PAGViewApi.play", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      playChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! PAGView
        do {
          try api.pigeonDelegate.play(pigeonApi: api, pigeonInstance: pigeonInstanceArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      playChannel.setMessageHandler(nil)
    }
    let pauseChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pag_darwin.PAGViewApi.pause", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pauseChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! PAGView
        do {
          try api.pigeonDelegate.pause(pigeonApi: api, pigeonInstance: pigeonInstanceArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      pauseChannel.setMessageHandler(nil)
    }
    let stopChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pag_darwin.PAGViewApi.stop", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! PAGView
        do {
          try api.pigeonDelegate.stop(pigeonApi: api, pigeonInstance: pigeonInstanceArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      stopChannel.setMessageHandler(nil)
    }
  }

  ///Creates a Dart instance of PAGViewApi and attaches it to [pigeonInstance].
  func pigeonNewInstance(pigeonInstance: PAGView, completion: @escaping (Result<Void, PAGError>) -> Void) {
    if pigeonRegistrar.ignoreCallsToDart {
      completion(
        .failure(
          PAGError(
            code: "ignore-calls-error",
            message: "Calls to Dart are being ignored.", details: "")))
    }     else if pigeonRegistrar.instanceManager.containsInstance(pigeonInstance as AnyObject) {
      completion(.success(()))
    }     else {
      let pigeonIdentifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeonInstance as AnyObject)
      let binaryMessenger = pigeonRegistrar.binaryMessenger
      let codec = pigeonRegistrar.codec
      let channelName: String = "dev.flutter.pigeon.pag_darwin.PAGViewApi.pigeon_newInstance"
      let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
      channel.sendMessage([pigeonIdentifierArg] as [Any?]) { response in
        guard let listResponse = response as? [Any?] else {
          completion(.failure(createConnectionError(withChannelName: channelName)))
          return
        }
        if listResponse.count > 1 {
          let code: String = listResponse[0] as! String
          let message: String? = nilOrValue(listResponse[1])
          let details: String? = nilOrValue(listResponse[2])
          completion(.failure(PAGError(code: code, message: message, details: details)))
        } else {
          completion(.success(()))
        }
      }
    }
  }
}
protocol PigeonApiDelegatePAGCompositionApi {
  func getWidth(pigeonApi: PigeonApiPAGCompositionApi, pigeonInstance: PAGComposition) throws -> Int64
  func getHeight(pigeonApi: PigeonApiPAGCompositionApi, pigeonInstance: PAGComposition) throws -> Int64
}

protocol PigeonApiProtocolPAGCompositionApi {
}

final class PigeonApiPAGCompositionApi: PigeonApiProtocolPAGCompositionApi  {
  unowned let pigeonRegistrar: PAGApiPigeonProxyApiRegistrar
  let pigeonDelegate: PigeonApiDelegatePAGCompositionApi
  init(pigeonRegistrar: PAGApiPigeonProxyApiRegistrar, delegate: PigeonApiDelegatePAGCompositionApi) {
    self.pigeonRegistrar = pigeonRegistrar
    self.pigeonDelegate = delegate
  }
  static func setUpMessageHandlers(binaryMessenger: FlutterBinaryMessenger, api: PigeonApiPAGCompositionApi?) {
    let codec: FlutterStandardMessageCodec =
      api != nil
      ? FlutterStandardMessageCodec(
        readerWriter: PAGApiPigeonInternalProxyApiCodecReaderWriter(pigeonRegistrar: api!.pigeonRegistrar))
      : FlutterStandardMessageCodec.sharedInstance()
    let getWidthChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pag_darwin.PAGCompositionApi.getWidth", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getWidthChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! PAGComposition
        do {
          let result = try api.pigeonDelegate.getWidth(pigeonApi: api, pigeonInstance: pigeonInstanceArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getWidthChannel.setMessageHandler(nil)
    }
    let getHeightChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pag_darwin.PAGCompositionApi.getHeight", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getHeightChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! PAGComposition
        do {
          let result = try api.pigeonDelegate.getHeight(pigeonApi: api, pigeonInstance: pigeonInstanceArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getHeightChannel.setMessageHandler(nil)
    }
  }

  ///Creates a Dart instance of PAGCompositionApi and attaches it to [pigeonInstance].
  func pigeonNewInstance(pigeonInstance: PAGComposition, completion: @escaping (Result<Void, PAGError>) -> Void) {
    if pigeonRegistrar.ignoreCallsToDart {
      completion(
        .failure(
          PAGError(
            code: "ignore-calls-error",
            message: "Calls to Dart are being ignored.", details: "")))
    }     else if pigeonRegistrar.instanceManager.containsInstance(pigeonInstance as AnyObject) {
      completion(.success(()))
    }     else {
      let pigeonIdentifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeonInstance as AnyObject)
      let binaryMessenger = pigeonRegistrar.binaryMessenger
      let codec = pigeonRegistrar.codec
      let channelName: String = "dev.flutter.pigeon.pag_darwin.PAGCompositionApi.pigeon_newInstance"
      let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
      channel.sendMessage([pigeonIdentifierArg] as [Any?]) { response in
        guard let listResponse = response as? [Any?] else {
          completion(.failure(createConnectionError(withChannelName: channelName)))
          return
        }
        if listResponse.count > 1 {
          let code: String = listResponse[0] as! String
          let message: String? = nilOrValue(listResponse[1])
          let details: String? = nilOrValue(listResponse[2])
          completion(.failure(PAGError(code: code, message: message, details: details)))
        } else {
          completion(.success(()))
        }
      }
    }
  }
}
protocol PigeonApiDelegatePAGFileApi {
  func asset(pigeonApi: PigeonApiPAGFileApi, asset: String) throws -> PAGFile
  func file(pigeonApi: PigeonApiPAGFileApi, file: String) throws -> PAGFile
  func memory(pigeonApi: PigeonApiPAGFileApi, memory: FlutterStandardTypedData) throws -> PAGFile
}

protocol PigeonApiProtocolPAGFileApi {
}

final class PigeonApiPAGFileApi: PigeonApiProtocolPAGFileApi  {
  unowned let pigeonRegistrar: PAGApiPigeonProxyApiRegistrar
  let pigeonDelegate: PigeonApiDelegatePAGFileApi
  ///An implementation of [PAGCompositionApi] used to access callback methods
  var pigeonApiPAGCompositionApi: PigeonApiPAGCompositionApi {
    return pigeonRegistrar.apiDelegate.pigeonApiPAGCompositionApi(pigeonRegistrar)
  }

  init(pigeonRegistrar: PAGApiPigeonProxyApiRegistrar, delegate: PigeonApiDelegatePAGFileApi) {
    self.pigeonRegistrar = pigeonRegistrar
    self.pigeonDelegate = delegate
  }
  static func setUpMessageHandlers(binaryMessenger: FlutterBinaryMessenger, api: PigeonApiPAGFileApi?) {
    let codec: FlutterStandardMessageCodec =
      api != nil
      ? FlutterStandardMessageCodec(
        readerWriter: PAGApiPigeonInternalProxyApiCodecReaderWriter(pigeonRegistrar: api!.pigeonRegistrar))
      : FlutterStandardMessageCodec.sharedInstance()
    let assetChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pag_darwin.PAGFileApi.asset", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      assetChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonIdentifierArg = args[0] as! Int64
        let assetArg = args[1] as! String
        do {
          api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
try api.pigeonDelegate.asset(pigeonApi: api, asset: assetArg),
withIdentifier: pigeonIdentifierArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      assetChannel.setMessageHandler(nil)
    }
    let fileChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pag_darwin.PAGFileApi.file", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      fileChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonIdentifierArg = args[0] as! Int64
        let fileArg = args[1] as! String
        do {
          api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
try api.pigeonDelegate.file(pigeonApi: api, file: fileArg),
withIdentifier: pigeonIdentifierArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      fileChannel.setMessageHandler(nil)
    }
    let memoryChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pag_darwin.PAGFileApi.memory", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      memoryChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonIdentifierArg = args[0] as! Int64
        let memoryArg = args[1] as! FlutterStandardTypedData
        do {
          api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
try api.pigeonDelegate.memory(pigeonApi: api, memory: memoryArg),
withIdentifier: pigeonIdentifierArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      memoryChannel.setMessageHandler(nil)
    }
  }

  ///Creates a Dart instance of PAGFileApi and attaches it to [pigeonInstance].
  func pigeonNewInstance(pigeonInstance: PAGFile, completion: @escaping (Result<Void, PAGError>) -> Void) {
    if pigeonRegistrar.ignoreCallsToDart {
      completion(
        .failure(
          PAGError(
            code: "ignore-calls-error",
            message: "Calls to Dart are being ignored.", details: "")))
    }     else if pigeonRegistrar.instanceManager.containsInstance(pigeonInstance as AnyObject) {
      completion(.success(()))
    }     else {
      let pigeonIdentifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeonInstance as AnyObject)
      let binaryMessenger = pigeonRegistrar.binaryMessenger
      let codec = pigeonRegistrar.codec
      let channelName: String = "dev.flutter.pigeon.pag_darwin.PAGFileApi.pigeon_newInstance"
      let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
      channel.sendMessage([pigeonIdentifierArg] as [Any?]) { response in
        guard let listResponse = response as? [Any?] else {
          completion(.failure(createConnectionError(withChannelName: channelName)))
          return
        }
        if listResponse.count > 1 {
          let code: String = listResponse[0] as! String
          let message: String? = nilOrValue(listResponse[1])
          let details: String? = nilOrValue(listResponse[2])
          completion(.failure(PAGError(code: code, message: message, details: details)))
        } else {
          completion(.success(()))
        }
      }
    }
  }
}
